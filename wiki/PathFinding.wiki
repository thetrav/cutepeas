#summary Notes for path finding design.

= Implementation =

Ok, so now we've got a basic implementation of the NodeGraph down, it's in the AddNodes module for the moment but that needs to be re-named.  The current NodeGraph module is a crack I took at it before realizing that I was doing it entirely the wrong way.

Within the AddNodes module (please rename to NodeGraph) there's a basic path finding implementation that traverses the node graph without any real intelligence, it basically takes the first linked traversable node that hasn't already been added to the path and makes that the next node in the path and recurses from there.

The graph is currently always rendered as circles and lines.  Eventually this should be toggled on and off and start off by default.

= Notes =
  * All peas inhabit the same traversable area, therefore sharing a single map is preferable
  * Keep path determination separate to movement & bounce
  * Whatever map is constructed it would be good to visualize it and be able to turn the visualization on and off while playing

= Path Determination Ideas =
A greedy way to determine using the current structure is to traverse EVERY node the pea is currently connected to, and keep track of the highest Y Node encountered.  
Now you've got a start and end point so all you have to do is a depth first tree search to reach the highest node, keep track of the path along the way to avoid looping.